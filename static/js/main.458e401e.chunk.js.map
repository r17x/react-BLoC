{"version":3,"sources":["services/SearchBLOC.js","Context.js","Search.js","serviceWorker.js","index.js","App.js"],"names":["API","user","endpoint","concat","fetch","then","res","json","resJson","query","this","request","SearchBLOC","api","_this","Object","classCallCheck","defineProperty","_results$","writable","value","Observable","_preamble$","_query$","BehaviorSubject","classPrivateFieldLooseBase","pipe","switchMap","from","search","withLatestFrom","_","q","complete","SearchContext","createContext","ResultList","props","searchBloc","useContext","_useState","useState","_useState2","slicedToArray","results","setResults","useEffect","results$","subscribe","react_default","a","createElement","map","_ref","id","name","key","Search","_useState3","_useState4","setQuery","next","type","onChange","_ref2","target","Boolean","window","location","hostname","match","ReactDOM","render","dispose","className","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.458e401e.chunk.js","sourcesContent":["import { Observable, from, BehaviorSubject } from 'rxjs'\nimport { switchMap, withLatestFrom } from 'rxjs/operators'\n\nclass API {\n  request(user) {\n    const endpoint = `https://api.github.com/users/${user}/repos?sort=true`\n    return fetch(endpoint)\n      .then(res => ('json' in res ? res.json() : []))\n      .then(resJson => resJson)\n  }\n\n  search(query) {\n    return this.request(query)\n  }\n}\n\nexport default class SearchBLOC {\n  // private property\n  #results$ = new Observable()\n  #preamble$ = new Observable()\n  #query$ = new BehaviorSubject('')\n\n  api = new API()\n  constructor(api) {\n    this.api = api ? api : this.api\n\n    this.#results$ = this.#query$.pipe(\n      switchMap(query => {\n        return from(this.api.search(query))\n      }),\n    )\n\n    this.#preamble$ = this.#results$.pipe(\n      withLatestFrom(this.#query$, (_, q) =>\n        q ? `Results for ${q}` : `All Results`,\n      ),\n    )\n  }\n\n  get results$() {\n    return this.#results$\n  }\n\n  get preamble$() {\n    return this.#preamble$\n  }\n\n  get query() {\n    return this.#query$\n  }\n\n  dispose() {\n    this.#query$ && this.#query$.complete()\n  }\n}\n","// REACT.CONTEXT\nimport { createContext } from 'react'\nimport SearchBLOC from './services/SearchBLOC'\nexport const SearchContext = createContext(new SearchBLOC())\n","import React, { useState, useContext, useEffect } from 'react'\nimport { SearchContext } from './Context'\n\nexport function ResultList(props) {\n  const searchBloc = useContext(SearchContext)\n  const [results, setResults] = useState([])\n\n  useEffect(() => {\n    searchBloc.results$.subscribe(setResults)\n  }, [searchBloc])\n\n  return (\n    <div>\n      {results.map(({ id, name }) => (\n        <div key={id}>{name}</div>\n      ))}\n    </div>\n  )\n}\n\nexport function Search(props) {\n  const searchBloc = useContext(SearchContext)\n  const [query, setQuery] = useState('ri7nz')\n\n  useEffect(() => {\n    searchBloc.query.next(query)\n  }, [searchBloc, query])\n\n  return (\n    <input\n      type=\"text\"\n      name=\"Search\"\n      value={query}\n      onChange={({ target }) => setQuery(target.value)}\n    />\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import React, { useContext, useEffect } from 'react'\nimport './App.css'\nimport { SearchContext } from './Context'\nimport { Search, ResultList } from './Search'\n\nexport default function App() {\n  const searchBloc = useContext(SearchContext)\n\n  useEffect(() => searchBloc.dispose, [searchBloc])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\" />\n      <Search />\n      <ResultList />\n    </div>\n  )\n}\n"],"sourceRoot":""}